# User

## Login

Login user using their credentials, returns their auth token

### HTTP Request

`POST <%= config[:endpoint] %>/login`

### Body Parameters

| Parameter      | Notes             |
|----------------|-------------------|
| username `str` | The user email    |
| password `str` | The user password |


### Response JSON Parameter

| Parameter | Notes               |
|-----------|---------------------|
| token     | The user auth token |



## Register


This endpoint registers an user to the site. An activation email will be sent to the user containing the
`verification_code`. If FLOWBACK_URL is specified in the backend .env, a link containing the `verification_code`
as a query parameter will be sent instead.
The code will be needed for the [next step of the registration.](#verify-register)

Example of the link: `<%= config[:endpoint] %>/register/`

If FLOWBACK_URL is specified in the backend's .env file, the user will instead receive a link:

```shell
curl "<%= config[:endpoint] %>/register" \
-d "username=flowback" \
-d "email=flowback@example.com"
```

### HTTP Request

`POST <%= config[:endpoint] %>/register`

### Body Parameters

| Parameter           | Notes |
|---------------------|-------|
| `username` *string* |       |
| `email` *string*    |       |

## Verify Register

This endpoint completes an user registration, and creates a password associated to the user.

```shell
curl "<%= config[:endpoint] %>/register/verify" \
-d "verification_code=your_verification_code" \
-d "password=your_password"
```

### HTTP Request

`POST <%= config[:endpoint] %>/register/verify`

### Body Parameters

| Parameter                    | Notes                              |
|------------------------------|------------------------------------|
| `verification_code` *string* | Can be obtained [here](#register). |
| `password` *string*          |                                    |

<aside class="warning">Make sure that the user doesn't do any typing mistakes with the password by e.g.
requiring the user to type their password twice.</aside>


## Forgot Password

This endpoint resets the user's password. An activation email will be sent to the user containing the
`verification_code`. If FLOWBACK_URL is specified in the backend .env, a link containing the `verification_code`
as a query parameter will be sent instead.
The code will be needed for the [next step of the password reset.](#verify-forgot-password)

Example of the link: `<%= config[:endpoint] %>/forgot_password/`

If FLOWBACK_URL is specified in the backend's .env file, the user will instead receive a link:

```shell
curl "<%= config[:endpoint] %>/forgot_password" \
-d "email=flowback@example.com"
```

### HTTP Request

`POST <%= config[:endpoint] %>/forgot_password`

### Body Parameters

| Parameter           | Notes |
|---------------------|-------|
| `email` *string*    |       |


## Verify Forgot Password

This endpoint resets the user's password.

```shell
curl "<%= config[:endpoint] %>/forgot_password/verify" \
-d "verification_code=verification_code" \
-d "password=password"
```

### HTTP Request

`POST <%= config[:endpoint] %>/forgot_password/verify`

### Body Parameters

| Parameter                    | Notes                                     |
|------------------------------|-------------------------------------------|
| `verification_code` *string* | Can be obtained [here](#forgot-password). |
| `password` *string*          |                                           |

<aside class="warning">Make sure that the user doesn't do any typing mistakes with the password by e.g.
requiring the user to type their password twice.</aside>

## List Users

This endpoint gets a list of users.

```shell
curl "<%= config[:endpoint] %>/users" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "username": "flowback",
      "profile_image": "https://example.com/media/image.png"
    },
    ...
  ]
}
```

### HTTP Request

`GET <%= config[:endpoint] %>/users`

### URL Parameters

| Parameter                     | Notes |
|-------------------------------|-------|
| `username` *string, optional* |       |

## Get User

This endpoint gets an user.

```shell
curl "<%= config[:endpoint] %>/user/<id>" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": {
    "id": 1,
    "email": "flowback@example.com",
    "username": "flowback",
    "profile_image": "https://example.com/media/image.png",
    "banner_image": "https://example.com/media/banner.png",
    "bio": "Hello world!",
    "website": "https://example.com/"
  }
}
```

### HTTP Request

`GET <%= config[:endpoint] %>/user`

### URL Parameters

| Parameter            | Notes                                   |
|----------------------|-----------------------------------------|
| `id` *int, optional* | Leave it blank to get the current user. |



## Update User

This endpoint updates an user.

```shell
curl "<%= config[:endpoint] %>/user/update" \
-H "Authorization: your_token_here" \
-d "username=flowback" \
-F "profile_image=@profile_image.png" \
-F "banner_image=@banner_image.png" \
-d "bio=Welcome to my profile!"
-d "website=https://example.com/"
```

### HTTP Request

`POST <%= config[:endpoint] %>/user`

### Body Parameters

| Parameter                        | Notes |
|----------------------------------|-------|
| `username` *string, optional*    |       |
| `profile_image` *file, optional* |       |
| `banner_image` *file, optional*  |       |
| `bio` *int, optional*            |       |
| `website` *int, optional*        |       |



## User schedule event list

List all schedule events for user

### HTTP Request

`POST <%= config[:endpoint] %>/user/schedule`

### Query Parameters

| Parameter                             | Notes               |
|---------------------------------------|---------------------|
| `start_date` *datetime, optional*     | Event starting date |
| `start_date__lt` *datetime, optional* |                     |
| `start_date__gt` *datetime, optional* |                     |
| `end_date` *datetime, optional*       | Event ending date   |
| `end_date__lt` *datetime, optional*   |                     |
| `end_date__gt` *datetime, optional*   |                     |
| `origin_name` *char, optional*        | The origin name     |
| `origin_id` *int, optional*           | The origin id       |

### Response Parameters

| Parameter                       | Notes |
|---------------------------------|-------|
| `schedule_id` *int*             |       |
| `event_id` *int*                |       |
| `title` *char*                  |       |
| `description` *char, optional*  |       |
| `start_date` *datetime*         |       |
| `end_date` *datetime, optional* |       |
| `origin_name` *char*            |       |
| `origin_id` *int*               |       |
| `schedule_origin_name` *char*   |       |
| `schedule_origin_id` *int*      |       |


## User schedule event create

Creates user event

### HTTP Request
`POST <%= config[:endpoint] %>/user/schedule/create`

### Query Parameters

| Parameter                       | Notes |
|---------------------------------|-------|
| `title` *char*                  |       |
| `description` *char, optional*  |       |
| `start_date` *datetime*         |       |
| `end_date` *datetime, optional* |       |

### Response Parameters

| Parameter  | Notes                                      |
|------------|--------------------------------------------|
| `id` *int* |                                            |


## User schedule event update

Updates user event 

### HTTP Request

`POST <%= config[:endpoint] %>/user/schedule/update`

### Body Parameters

| Parameter                         | Notes |
|-----------------------------------|-------|
| `event_id` *int*                  |       |
| `title` *char, optional*          |       |
| `description` *char, optional*    |       |
| `start_date` *datetime, optional* |       |
| `end_date` *datetime, optional*   |       |


## User schedule event delete

Delete event from user schedule

### HTTP Request

`POST <%= config[:endpoint] %>/user/schedule/delete`

### Body Parameters
| Parameter        | Notes |
|------------------|-------|
| `event_id` *int* |       |



## User kanban entry list

List all kanbans for user

### HTTP Request

`GET <%= config[:endpoint] %>/user/kanban/entry/list`

### Body Parameters

| Parameter                                | Notes |
|------------------------------------------|-------|
| `origin_type` *str, optional*            |       |
| `origin_id` *int, optional*              |       |
| `created_by` *int, optional*             |       |
| `assignee` *int, optional*               |       |
| `title__icontains` *str, optional*       |       |
| `description__icontains` *str, optional* |       |
| `tag` *int, optional*                    |       |

### Response Parameters

| Parameter                   | Notes |
|-----------------------------|-------|
| `id` *int*                  |       |
| `created_by` *UserResponse* |       |
| `assignee` *UserResponse*   |       |
| `title` *str*               |       |
| `description` *str*         |       |
| `tag` *int*                 |       |

### UserResponse Parameters

| Parameter               | Notes |
|-------------------------|-------|
| `id` *int*              |       |
| `profile_image` *image* |       |
| `username` *str*        |       |



## User kanban entry create

Creates a user kanban

### HTTP Request

`POST <%= config[:endpoint] %>/user/kanban/entry/create`

### Body Parameters

| Parameter           | Notes |
|---------------------|-------|
| `title` *str*       |       |
| `description` *str* |       |
| `tag` *int*         |       |
| `assignee` *int*    |       |



## User kanban entry update

Updates a user kanban

### HTTP Request

`POST <%= config[:endpoint] %>/user/kanban/entry/update`

### Body Parameters

| Parameter           | Notes |
|---------------------|-------|
| `entry_id` *int*    |       |
| `title` *str*       |       |
| `description` *str* |       |
| `tag` *int*         |       |
| `assignee` *int*    |       |



## User kanban entry delete

Deletes a user kanban

### HTTP Request

`POST <%= config[:endpoint] %>/user/kanban/entry/delete`

### Body Parameters

| Parameter           | Notes |
|---------------------|-------|
| `entry_id` *int*    |       |
